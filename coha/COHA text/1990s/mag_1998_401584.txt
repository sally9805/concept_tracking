@@401584

// ON A CHILLY MONDAY morning in south-central Virginia , a former motel clerk and an ex-McDonald 's cashier settle in at their desks . Down the hall , a recently laid-off plant manager pours coffee for a police officer who 's in the midst of a career change . Just before 8 a.m. , they gather to discuss the day 's mission , which , as they see it , is to save the world . Or at least the state of Connecticut . Welcome to the Software Factory 's Year 2000 remediation facility in South Boston , Virginia , a town of 7,000 that no one is likely to mistake for Silicon anything . It is here , however , that a group of computer neophytes-some of whom had n't even heard of the Year 2000 problem until a few months before-are working to ensure that Connecticut residents do n't get bitten by the millennium bug on January 1 , 2000 . Why South Boston ? Why not ? With a little more than a year to go before the change of century , companies and @ @ @ @ @ @ @ @ @ @ systems do n't read the year 2000 as the year 1900 . As the immovable deadline draws closer , however , many are facing an irresistible force-there 's more programming to do than programmers to do it . Most are turning to outside vendors like the Software Factory-more than 600 have materialized across the nation over the past two years alone-for help . Which underscores the essence of the issue : The Year 2000 bug is proving so pervasive that some computers will likely not be ready . But perhaps more disturbing is this reality : In many cases , it 's too late to fix the problem correctly . Instead , programmers are reaching into a bag of tricks and pulling out ways to work around the problem-a fact that has more than a few experts worried that we 'll be dealing with Year 2000 issues long after the year 2000 . The Year 2000 problem , as you 've likely heard , is the unfortunate result of years of shortcuts that programmers , mostly because of shortsightedness , used to save computer memory , which historically has been extremely @ @ @ @ @ @ @ @ @ @ many of which run on ancient ( by computer standards , anyway ) programming languages like Cobol , in so-called firmware ( tiny chips with simple programs etched into them that , among other tasks , control many facets of manufacturing ) , and even in older PCs . Instead of depicting years as four digits-1998 , for example-years appear in computer code as two digits : 98 . The " 19 " is understood-even after January 1 , 2000 , when millions of computers around the world will read " 00 " as ' 1900 . " Big deal ? Actually , it is . In today 's society , computers control everything from defense systems to the electric grid that powers your home . So if the thought of a huge mainframe spewing out bad data prompts a yawn , consider the consequences . Your credit card bill is suddenly 99 years overdue , you owe another century 's worth of interest on your home , and Grandma gets a notice to enter kindergarten ( assuming the mail is still moving ) . Phone lines are busy , and @ @ @ @ @ @ @ @ @ @ 're under a boil-water alert , and the shelves at the local supermarket are bare . And oh yeah-the money in your bank account disappears faster than it did last time you visited Vegas . Okay , that 's a worst-case scenario . But the Year 2000 bug will likely hit some people harder than their New Year 's Day hangover . Embedded chips , for example , show up in the unlikeliest of places , such as on the ocean floor ( oil rigs ) and in space ( satellites ) . And though only a small percentage of them are affected by the bug-less than 1 percent-billions are in circulation ; finding the susceptible ones is not easy . A single chip could , say , bring a power plant to a halt because it detects overdue maintenance . Or , closer to home , freeze traffic lights and elevators . Or make them work improperly . January 1 , 2000 , is a Saturday , but some embedded chips-such as those used in some bank vaults and building systems-will think it 's Monday , as it was in @ @ @ @ @ @ @ @ @ @ , they 'll go into weekend mode on Thursday , January 6. // What Is the Problem ? // And if the Year 2000 problem itself was n't challenging enough , a few related issues are complicating matters . The first is February 29 , 2000 . The 1900 calendar had no leap day , but the year 2000 does . Because leap days during millennial years are somewhat rare , many programmers mistakenly did not include one for 2000 . As a result , even Year 2000-compliant systems must be checked for leap day compliance . In addition , in what can only be considered a cruel joke from the patron saint of bad timing , the world could get a taste of a Year 2000-like fiasco next year . Many old-time programmers used the number 9999 as a signal to the computer that it has reached the end of a file . On September 9 , 1999 , dates in some code will appear as 9999 ; if not corrected , computers , as instructed , will quit reading the file , freezing the machine . Likewise , systems @ @ @ @ @ @ @ @ @ @ of the year instead of the month and the day ) could fail on April 9 , 1999-the 99th day of 1999 . All of this has Bob Reinke preparing for the worst . The 49-year-old programmer and Year 2000 consultant has worked for a number of federal agencies in the Washington , D.C , area during his 29-year career . " I knowingly put buggy code in , " he says . " And I was quite proud of the fact that I saved two bytes of memory every time a date was used . No one thought these programs would still be around . " But they are , and Reinke believes history wo n't measure the effects in dollars . He predicts global chaos lasting as long as six months . He 's stocking up on food and water , expects to be without electricity for days , maybe weeks , and plans to take much of his money out of the bank . " January 1 , 2000 , " he says , " will be remembered as Black Saturday . " Though Reinke 's dire predictions @ @ @ @ @ @ @ @ @ @ IT ) world , they do underscore the complexity of a fix that-at least on the surface-seems pretty basic : Just find each date field in a piece of code and expand it to four digits . The main problem is that programmers are a wacky sort , not willingly constrained by either logic or consistency . So in a medical software program , for example , a patient 's date of birth might be defined as DOB in one place and PDB in another . Or , just for fun , the programmer may have defined it as the name of his golden retriever . Finding all these dates takes an enormous amount of time and testing . As a result , many companies are looking at alternative approaches , the most popular of which is called windowing . In fact , it 's become the preferred Year 2000 methodology around the world . With windowing , instead of expanding year fields to four digits , the existing two-digit field is assigned two windows that define the century . Windowing works as long as the data does n't span more @ @ @ @ @ @ @ @ @ @ solution for programs that feature , for instance , dates of birth ( including Social Security and IRS systems ) . Freddie Mac , the multibillion-dollar mortgage buyer based in McLean , Virginia , is relying heavily on windowing . The company purchases more than one million mortgages each year , most having a life span of 30 years . Payment , term , interest , and other information about each mortgage is kept on the company 's vast computer network . In its windowing scenario , numbers falling between 50 and 99 in the year field are interpreted as occurring in the 20th century , while numbers between 00 and 49 are read as the 21st century . So , for example , 09/01/98 would be interpreted as September 1 , 1998 , while 09/01/05 would be read as September 1 , 2005 . The main advantage of windowing is that programmers do not have to find and expand every date field in the code . That 's because each computer language has specific words reserved for date-related functions , such as " sort , " " difference , " @ @ @ @ @ @ @ @ @ @ , then program the window over these functions . ( They also ensure that the 00 in the year 2000 wo n't mess up date-related calculations. ) // Why You 're Taking the Stairs // For all its benefits , however , the industry 's reliance on windowing is raising a few eyebrows . " It 's a BandAid , or maybe a tourniquet , because it constrains the useful life of the system , " says Robert Martin , head of Year 2000 efforts for Bedford , Massachusetts-based Mitre , a governmentfunded organization advising the Department of Defense and the Federal Aviation Administration . " Eventually , either the code will have to be expanded , the systems replaced , or the window moved forward . " Freddie Mac , for its part , plans to phase out windowed systems in the early 2000s . Windowing also raises complexities when interacting with external data . Freddie Mac receives electronic information from 2,300 outside sources , all of which must be Year 2000 compliant . At each interface , the company must check that its computers read the incoming data correctly @ @ @ @ @ @ @ @ @ @ has expanded date fields to four digits , then Freddie Mac must build in a software " bridge " to strip the century indicators from that data before it enters the company 's system . Drawbacks aside , there 's no denying the cost and time savings of windowing . According to Michael Censky , head of Year 2000 efforts for Freddie Mac , the company is spending $75 million to fix the bug . In addition , 10 percent of its 3,500 employees are working on the problem . How much more time and money would it take to do fourdigit expansion ? aI ca n't even guess , " Censky says , adding that windowing will allow some companies to make the deadline that otherwise would not . Rich Hoffman , a member of the U.S. Army Materiel Command 's Year 2000 team in Alexandria , Virginia , agrees , but worries that there 's a tendency to jump into windowing too quickly . The Army 's preferred fix is four-digit expansion , and Hoffman 's team makes every effort to employ this method . However , he admits @ @ @ @ @ @ @ @ @ @ , " he says . " And in cases where there 's limited documentation and resources , it 's the best choice . " Hoffman 's bigger concern is the historic shortsightedness of the IT community . " Considering that no one thought Cobol would still be around today , I wonder how we 're going to follow up after 2000 . It would be easy , especially with the high turnover in this industry , to let this problem come back and bite us again . " According to Hoffman , the post-2000 contingency plans for the Department of Defense ( DoD ) , of which the Army is a part , center around fixing or replacing systems that have been windowed . In the meantime , DoD plans to terminate at least 170 control , command , communications , and computer systems and replace them with equipment not infected by the Year 2000 bug . Another sidestep approach , being employed on a lesser scale , is a 28-year time bridge . The 1972 calendar mirrors 2000 's exactly . By setting computers back 28 years , programmers can @ @ @ @ @ @ @ @ @ @ encapsulation , this method works as long as the actual year does n't influence the functionality of the program , such as with a keycard access system that uses only day-of-week input . If the system interacts with external sources , programmers write a software bridge that subtracts 28 years from incoming dataand adds 28 years to outgoing data . According to Hoffman , a time bridge will likely be used to fix Autodin , the messaging system used by the military to send classified e-mail to and from the battlefield . Years mirror each other in this 28-year window until 2100 , so the problem does n't go away forever with this approach either . Though windowing and encapsulation are the most common alternative approaches , there are several others that squeeze century information into the existing six-digit space . One method involves making the first digit a century field ( where the number 1 equals 19 , 2 equals 20 , and so on ) , the next two a year field , and the last three a Julian day-of-the-year field . The benefit of this method is that @ @ @ @ @ @ @ @ @ @ still have to find all the date fields . For vendors like the Software Factory , the IT community 's reliance on alternative approaches is a boon . " The problem is not going away on January 1 , 2000 , " says Jerry Hill , co-owner of the Software Factory , whose employees all went through a month-long unpaid boot camp " to learn Cobol before being hired . " We 'll have a strong Year 2000 business into the next century . " But programmers on the front lines of the Year 2000 fix are not looking that far ahead just yet-there 's still a lot of work to be done before January 1 , 2000 . According to Hoffman , the Army 's systems are now more than 80 percent compliant-and on schedule to be completely fixed by the end of this year-but the organization will spend most of next year testing them . " Fixing the code is a small facet , " he says . " Testing and implementation take longer than actual code renovation . " That has Martin concerned . " Even though organizations @ @ @ @ @ @ @ @ @ @ change , " he says , " they may not have time to do proper testing . So the question becomes , Do we really know how our computers run ? " Bob Reinke is convinced we do n't . " Year 2000 going to set the industry back 30 years , " he says . " People are going to blame everything on computers for a long , long time . " Hoffman is more optimistic , but does worry that word is not getting out to small businesses . " Walk into the local grocery store , " he says , " and ask them if they 've checked their inventory control systems or their credit card readers . You 'll be amazed at the strange looks you 'll get . " But back at the Software Factory , Jerry Hill-who himself was writing buggy code as recently as 1996-sees a silver lining . " We 've learned a tough lesson , " he says . " After January 1 , 2000 , technology no longer will be an unmanaged asset . " When the dust settles , " @ @ @ @ @ @ @ @ @ @ technology 's coming of age . " <p>                     